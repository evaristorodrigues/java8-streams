/**
 * 
 */
package java8;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * @author evaristosrodrigues
 *
 */
public class StreamsExamples {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		// 1 - Integer Stream
		System.out.println("1 - Integer Stream");
		IntStream
		.range(1, 10)
		.forEach(System.out::print);
		System.out.println();
		
		//2 - Integer Stream with skip
		System.out.println("2 - Integer Stream with skip");
		IntStream
		.range(1, 10)
		.skip(5)
		.forEach(x -> System.out.println(x));
		System.out.println();
		
		//3 -  Integer Stream with sum
		System.out.println("3 -  Integer Stream with sum");
		System.out.println(
			IntStream.range(1, 5)
			.sum());
		System.out.println();
		
		//4 - Stream.of, sorted and findFirst
		System.out.println("4 - Stream.of, sorted and findFirst");
		Stream.of("Ava", "Aneri", "Alberto")
		.sorted()
		.findFirst()
		.ifPresent(System.out::println);
		System.out.println();
		//5 - Stream from Array, sort, filter and print
		System.out.println("5 - Stream from Array, sort, filter and print");
		String[] names = {"Al", "Ankit", "Kushal","Brent","Sarika","amanda","hans","Shivika"};
		Arrays.stream(names)
		.filter(x->x.startsWith("S"))
		.sorted()
		.forEach(System.out::println);
		System.out.println();
		
		// 6- Average of square of an int array
		System.out.println("6- Average of square of an int array");		
		Arrays.stream(new int[] {2,4,6,8,10})
		.map(x -> x*x)
		.average()
		.ifPresent(System.out::println);
		
		// 7- Stream from a List, filter, and print
		System.out.println("7- Stream from a List, filter, and print");		
		List<String> people = Arrays.asList("Al", "Ankit", "Kushal","Brent","Sarika","amanda","hans","Shivika");
		people.stream()
		.map(String::toLowerCase)
		.filter(x->x.startsWith("a"))
		.forEach(System.out::println);
		System.out.println();
		
		// 8- Stream rows from text file, sort, filter, an print
		System.out.println("8- Stream rows from text file, sort, filter, an print");
		Stream<String> bands = Files.lines(Paths.get("bands.txt"));
		bands.sorted()
		.filter(x -> x.length() > 13)
		.forEach(System.out::println);
		bands.close();
		System.out.println();
		
		// 9- Stream rows from text file and save to List
		System.out.println("9- Stream rows from text file and save to List");
		List<String> bands2 = Files.lines(Paths.get("bands.txt"))
				.filter(x-> x.contains("a"))
				.collect(Collectors.toList());
		bands2.forEach(x -> System.out.println());
		System.out.println();
	}

}
